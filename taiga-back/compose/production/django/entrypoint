#!/bin/ash

set -o errexit
set -o pipefail
set -o nounset

echo 'App Starting...'
echo "Timing $(date +%FT%T )"

if [ "${DATABASE_PASSWORD:-""}" == "base64:"* ]; then
    echo "Decrypting password..."
    echo "${DATABASE_PASSWORD#"base64:"}" | base64 -d > "/tmp/cipher.blob"
    export DATABASE_PASSWORD="$(aws --region "${AWS_REGION}" kms decrypt --ciphertext-blob "fileb:///tmp/cipher.blob" --output text --query Plaintext | base64 -d || exit $?)"
fi

export POSTGRES_USER="${POSTGRES_USER:-$DATABASE_USERNAME}"
export POSTGRES_PASSWORD="${POSTGRES_PASSWORD:-$DATABASE_PASSWORD}"
export POSTGRES_DB="${POSTGRES_DB:-$DATABASE_NAME}"
export POSTGRES_HOST="${POSTGRES_HOST:-$DATABASE_FQDN}"
export POSTGRES_PORT="${POSTGRES_PORT:-$DATABASE_PORT}"
export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"

postgres_ready() {
python << END
import sys

import psycopg2

try:
    psycopg2.connect(
        dbname="${POSTGRES_DB}",
        user="${POSTGRES_USER}",
        password="${POSTGRES_PASSWORD}",
        host="${POSTGRES_HOST}",
        port="${POSTGRES_PORT}",
    )
except psycopg2.OperationalError:
    sys.exit(-1)
sys.exit(0)

END
}
until postgres_ready; do
  >&2 echo 'Waiting for PostgreSQL to become available...'
  sleep 1
done
>&2 echo 'PostgreSQL is available'

exec "$@"
